'use strict';

/**
 * Module dependencies.
 */
var mongoose = require('mongoose'),
	errorHandler = require('./errors.server.controller'),
	<modelname/> = mongoose.model('<modelname/>'),
	_ = require('lodash');

/**
 * Create a modelname
 */
exports.create = function(req, res) {
	var <modelnamelower/> = new <modelname/>(req.body);
	<modelnamelower/>.user = req.user;

	<modelnamelower/>.save(function(err) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			res.jsonp(<modelnamelower/>);
		}
	});
};

/**
 * Show the current <modelname/>
 */
exports.read = function(req, res) {
	res.jsonp(req.<modelnamelower/>);
};

/**
 * Update a modelname
 */
exports.update = function(req, res) {
	var <modelnamelower/> = req.<modelnamelower/> ;

	<modelnamelower/> = _.extend(<modelnamelower/> , req.body);

	<modelnamelower/>.save(function(err) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			res.jsonp(<modelnamelower/>);
		}
	});
};

/**
 * Delete an <modelname/>
 */
exports.delete = function(req, res) {
	var <modelnamelower/> = req.<modelnamelower/> ;

	<modelnamelower/>.remove(function(err) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			res.jsonp(<modelnamelower/>);
		}
	});
};

/**
 * List of <modelname/>
 */
exports.list = function(req, res) { 
	<modelname/>.find().sort('-created').populate('user', 'displayName').exec(function(err, <modelnameplural/>) {
		if (err) {
			return res.status(400).send({
				message: errorHandler.getErrorMessage(err)
			});
		} else {
			res.jsonp(<modelnameplural/>);
		}
	});
};

/**
 * <modelname/> middleware
 */
exports.<modelnamelower/>ByID = function(req, res, next, id) { 
	<modelname/>.findById(id).populate('user', 'displayName').exec(function(err, <modelnamelower/>) {
		if (err) return next(err);
		if (! <modelnamelower/>) return next(new Error('Failed to load <modelname/> ' + id));
		req.<modelnamelower/> = <modelnamelower/> ;
		next();
	});
};

/**
 * <modelname/> authorization middleware
 */
exports.hasAuthorization = function(req, res, next) {
	if (req.<modelnamelower/>.user.id !== req.user.id) {
		return res.status(403).send('User is not authorized');
	}
	next();
};
